/*
TODO :
1. implement vote
2. implement delete for author's poll
*/
var Helper = {
	_getCookie : function(name) {
		var dc = document.cookie;
	    var prefix = name + "=";
	    var begin = dc.indexOf("; " + prefix);
	    if (begin == -1) {
	        begin = dc.indexOf(prefix);
	        if (begin != 0) return null;
	    }
	    else
	    {
	        begin += 2;
	        var end = document.cookie.indexOf(";", begin);
	        if (end == -1) {
	        end = dc.length;
	        }
	    }
	    return unescape(dc.substring(begin + prefix.length, end));
	}
};
var PollItem = React.createClass({
	mixins : [Helper],
	_getExcerpt : function(str, separator, num_of_word) {
	    separator = separator || " ";
	    var arr = str.split(separator);
	    if (arr.length < num_of_word) {
	    	return str;
	    }
	    var result = "";
	    for (var i = 0; i < num_of_word; i++) {
	      if (arr[i] !== undefined) {
	        result += (arr[i] + separator);
	      }
	    }
	    return result + "...";
  	},
  	_onDelete : function() {
  		PubSub.publish("delete_button_clicked", this.props.index);
  	},
	render : function() {
		var deleteButton = [];
		if (this.props.author == this._getCookie("token")) {
			deleteButton.push(<a onClick={this._onDelete} href="#" className="pull-right"><i className="fa fa-trash"></i></a>);
		}
		return (
    		<div className="panel panel-default">
		        <div className="panel-heading">
		          <h3 className="panel-title">
		            {this.props.title}
		            {deleteButton}
		          </h3>
		        </div>
		        <div className="panel-body">
		          <div className="row">
		            <div className="col-xs-12">
						{this._getExcerpt(this.props.description, " ", 10)}
						<br />
	              		<a onClick={this.props.see_polling_detail} href={"#detail#poll_id=" + this.props.index}>Click to see detail <i className="fa fa-chevron-circle-right"></i></a>
		            </div>
		          </div>
		        </div>
	      	</div>
	    );
	}
});
var CreatePollForm = React.createClass({
	_sanitizeInput : function() {
		var arr = this.formdata.poll_options.split(",");
		for (var i = 0; i < arr.length; i++) {
			if (arr[i].trim() == "") {
				continue;
			}
			arr[i] = arr[i].trim();
		}
		return {
			title : this.formdata.title.trim(),
			description : this.formdata.description.trim(),
			poll_options : arr.join(",")
		};
	},
	_validateForm : function(){
		if (this.formdata.title == "" || this.formdata.description == "" || this.formdata.poll_options == "") {
			return false;
		}
		var arr = this.formdata.poll_options.split(",");
		if (arr.length >= 10) {
			return false;
		}
		return true;
	},
	_processForm : function(e){
		e.preventDefault();
		this.formdata = {
			title : this.refs.title.value,
			description : this.refs.description.value,
			poll_options : this.refs.poll_options.value
		};

		if (this._validateForm()) {
			this.formdata = this._sanitizeInput();
			var self = this;
			PubSub.publish("request_loading_page");
			$.ajax({
				method: "POST",
				url: "/createpoll",
				data : self.formdata,
				success : function(result){
					PubSub.publish("on_createpoll_succeed");	
				},
				error : function(jqxhr, textstatus){
					PubSub.publish("request_error_page");
				}
			});
		}
		else {
			alert("form is not valid. Please fill all fields, and make sure poll_options item amount is fewer than 10");
		}

	},
	render : function() {
		return (
			<form id="createpoll_form" ref="createpoll_form" onSubmit={this._processForm}>
				<h2>Create New Poll</h2>
				<div className="input-group">
					<label>Poll title</label>
			  		<input name="title" ref="title" type="text" className="form-control" placeholder="E.g : Democrat or Republican?" />
				</div>
				<div className="input-group">
					<label>Description</label>
			  		<input name="description" ref="description" type="text" className="form-control" placeholder="Explain why anyone should vote" />
				</div>
				<div className="input-group">
					<label>Poll Options (comma separated, maximum 10 items)</label>
			  		<input name="poll_options" ref="poll_options" type="text" className="form-control" placeholder="E.g : Democrat, Republican, Both" />
				</div>
				<br />
				<button type="submit" className="btn btn-primary">Submit</button>
			</form>
		);
	}
});
var VoteForm = React.createClass({
	_processVote : function(e) {
		e.preventDefault();

		var self = this;
		this.setState({pagestate : "loading"});

		//1. Take data from form
		var formdata = {
			index : this.refs.index.value,
			vote : this.refs.vote.value
		};

		$.ajax({
			url : "/vote",
			data : formdata,
			method :"POST",
			success : function(msg) {
				self.setState({pagestate : "voted", message : "Thanks! You have voted for this topic. Your voice is highly appreciated"});
			},
			error : function(jqxhr, textstatus) {
				self.setState({pagestate : "error", message : textstatus});
			}
		});
	},
	getInitialState : function() {
		return {
			pagestate : "default",
			message : ""
		};
	},
	render : function() {
		if (this.state.pagestate == "default") {
			return (
				<form ref="voteform" onSubmit={this._processVote}>
					<input type="hidden" name="index" ref="index" value={this.props.index} />
					<select className="form-control voteDropdown" ref="vote">
					    {this.props.options}
					</select> 
					<button type="submit" className="buttonVote pull-left">Vote</button>
					<div className="clearfix"></div>
				</form>
			)	
		}
		else if (this.state.pagestate == "loading") {
			return (
				<form ref="voteform" onSubmit={this._processVote}>
					<input type="hidden" name="index" ref="index" value={this.props.index} />
					<select disabled className="form-control voteDropdown" ref="vote">
					    {this.props.options}
					</select> 
					<button disabled type="submit" className="buttonVote pull-left">Vote</button>
					<div className="loading">Loading ...</div>
					<div className="clearfix"></div>
				</form>
			)
		}
		else if (this.state.pagestate == "error") {
			return (
				<form ref="voteform" onSubmit={this._processVote}>
					<input type="hidden" name="index" ref="index" value={this.props.index} />
					<select className="form-control voteDropdown" ref="vote">
					    {this.props.options}
					</select> 
					<button type="submit" className="buttonVote pull-left">Vote</button>
					<div className="clearfix"></div>
					<div className="form-message">{this.state.message}</div>
				</form>
			);			
		}

		return (
			<form ref="voteform" onSubmit={this._processVote}>
				<input type="hidden" name="index" ref="index" value={this.props.index} />
				<select disabled className="form-control voteDropdown" ref="vote">
				    {this.props.options}
				</select> 
				<button disabled type="submit" className="buttonVote pull-left">Vote</button>
				<div className="clearfix"></div>
				<div className="form-message">{this.state.message}</div>
			</form>
		);

		
	}
});
//backup code
var PollDetail = React.createClass({
	mixins : [Helper],
	_onDeleteLinkClicked : function(){
		PubSub.publish("delete_button_clicked", this.props.index);
	},
	render : function() {
		//initiate vars
		var data = this.props.data;
		var sum = 0;

		//get number of all votes
		for (var key in data) {
			sum += data[key];
		}

		//building vote result
		var graphs = [];
		var options = [];
		options.push(<option value="-">-- Select your vote --</option>);
		var idx = 0;
		for (var key in data) {
			//building options
			options.push(<option value={key}>{key.toUpperCase()}</option>);

			//styling graphic
			var classname = "graphcolor" + idx;
			var percentage = 0;
			if (data[key] !== 0 && sum !== 0) {
				percentage = (data[key] * 100 / sum).toFixed(2);
			}
			//aesthetic
			var percentageWidth = percentage;
			if (percentageWidth < 1) {
				percentageWidth = 1;
			}

			var style = {
				width : percentageWidth + "%"
			}
			graphs.push(
				<div>
					<div style={style} className={classname} />
					<div className="legend">{key.toUpperCase() + " : " + percentage + "%"}</div>
				</div>
			);
			idx++;
		}

		//building share link
		var getUrl = window.location;
		var baseUrl = getUrl .protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1];
		var shareUrl = encodeURIComponent(baseUrl + "#detail#poll_id=" + this.props.index);
		var twitterLink = "https://twitter.com/intent/tweet?text=" + this.props.title + " Check out the vote result : "+ shareUrl;

		//build delete button if the user is the authors
		var deleteButton = [];
		if (this.props.author == this._getCookie("token")) {
			deleteButton.push(
				<a onClick={this._onDeleteLinkClicked} href="#" className="deletePollLink"><i className="fa fa-trash"></i> Click to delete this poll</a>
			);
		}

		return (
			<div>
				<ol className="breadcrumb">
					<li><a onClick={this.props.homebutton} href="#home">Home</a></li>
					<li>{this.props.title}</li>
				</ol>
				{deleteButton}
				<br />
				<h1 className="title">{this.props.title}</h1>
				<div className="row">
					<div className="col-md-4">
						<VoteForm options={options} index={this.props.index} />
						<br />
						<a target="_blank" href={twitterLink} className="buttonShare"><i className="fa fa-twitter"></i> Tweet this to your followers</a>
						<br /><br />
						{this.props.description}
					</div>
					<div className="col-md-8"><h3>Poll Result : </h3>{graphs}</div>
				</div>
			</div>
		);
	}
});
var LoginButton = React.createClass({
	mixins : [Helper],
	_onCreatepollClick : function(){
		PubSub.publish("on_create_pollbutton_click");
	},
	render : function() {
		if (this._getCookie("token") !== null) {
			window.isUserAuthed = true;
			return (
				<div className="right-menu">
					<a href="/signout" className="buttonLogin">
						Sign Out
					</a>
					<a onClick={this._onCreatepollClick} href="#createpoll" className="createPollButton">
						<i className="fa fa-plus fa-2x"></i>
					</a>
				</div>
			);
		}
		else {
			window.isUserAuthed = false;
			return (
				<a href="https://github.com/login/oauth/authorize?client_id=c73864bb2fa3040f875e" className="buttonLogin">
					<i className="fa fa-github"></i> Sign in with Github
				</a>
			);
		}
	}
});
var HomeButton = React.createClass({
	render : function() {
		return (
			<a href="#home" onClick={this._onClick}>Voters</a>
		);
	},
	_onClick : function() {
		PubSub.publish('on_homebutton_click');
	}
});
var App = React.createClass({
	_setRoute : function() {
		this.route = {
			'default' : "home",
			'poll_id' : "detail",
			'createpoll' : 'createpoll'
		};
		this.authorizedOnlyRoutes = [
			'createpoll'
		];
	},
	getInitialState : function() {
		return {
			dataset : [],
			currentPage : "",
			selectedItem : -1
		}
	},
	_getPollingList : function(callback, shouldGetFreshdata) {
		if (this.state.dataset.length > 0 && !shouldGetFreshdata) {
			callback(this.state.dataset);
		}
		else {
			var self = this;
			self.setState({currentPage: "loading"});
			$.ajax({
				method: "GET",
				url : "/findAllPoll",
				success: function(dataset){
					callback(JSON.parse(dataset));
				},
				error: function(jqxhr, textstatus) {
					self.setState({currentPage: "error"});
				}
			});	
		}
	},
	componentWillMount : function() {
		var self = this;
		
		/*--------------------------------
			subscribe to outside events
		//--------------------------------*/
		this.pubsub_token = PubSub.subscribe("on_homebutton_click", function(){
			this._getPollingList(function(dataset){
				self.setState({currentPage : "home", dataset: dataset});	
			});
		}.bind(this));
		this.pubsub_token = PubSub.subscribe("on_create_pollbutton_click", function(){
			this.setState({currentPage : "createpoll"});
		}.bind(this));
		this.pubsub_token = PubSub.subscribe("request_loading_page", function(){
			this.setState({currentPage : "loading"});
		}.bind(this));
		this.pubsub_token = PubSub.subscribe("request_error_page", function(){
			this.setState({currentPage : "error"});
		}.bind(this));
		this.pubsub_token = PubSub.subscribe("delete_button_clicked", function(name, index){
			self._onDelete(index);
		}.bind(this));
		this.pubsub_token = PubSub.subscribe("on_createpoll_succeed", function(){
			this._getPollingList(function(dataset){
				window.location.hash = "#detail#poll_id=" + (dataset.length - 1);
				self.setState({currentPage : "detail", dataset: dataset, selectedItem: (dataset.length - 1)});	
			}, true);
		}.bind(this));
		

		/*--------------------------------
			ROUTING
		//--------------------------------*/
		this._setRoute();
		var currentPage = "";
		for (var key in this.route) {
			if (window.location.hash.includes(key)) {
				currentPage = this.route[key];
				break;
			}
		}
		currentPage = currentPage == "" ? this.route.default : currentPage;

		if (currentPage == "home") {
			this._getPollingList(function(dataset){
				self.setState({currentPage : currentPage, dataset: dataset});	
			});
		}
		else if (currentPage == "detail") {
			this._getPollingList(function(dataset){
				self.setState({
					dataset : dataset
					, currentPage : currentPage
					, selectedItem : window.location.hash.split("=")[1]
				});
			})
		}
		else {
			this.setState({currentPage : currentPage});
		}
		
	},
	_onDelete : function(index){
		if (confirm("Are you sure you want to delete this poll?") == true) {
			var id = this.state.dataset[index]._id;
		    this.setState({currentPage : "loading"});
		    var self = this;
		    $.ajax({
		    	method: "DELETE",
		    	url: "/deletepoll",
		    	data : {
		    		 id : id
		    	},
		    	success : function(){
		    		self._getPollingList(function(dataset){
						self.setState({currentPage : "home", dataset: dataset});	
					}, true);
		    	},
		    	error : function(){
		    		this.setState({currentPage : "error"});
		    	}
		    });
		}
	},
	_onSeePollingDetailClick : function(i) {
		this.setState({
			currentPage : "detail",
			selectedItem : i
 		});
	},
	_onHomeButtonClick : function() {
		this.setState({currentPage: "home"});
	},
	_getCookie : function(name) {
		var dc = document.cookie;
	    var prefix = name + "=";
	    var begin = dc.indexOf("; " + prefix);
	    if (begin == -1) {
	        begin = dc.indexOf(prefix);
	        if (begin != 0) return null;
	    }
	    else
	    {
	        begin += 2;
	        var end = document.cookie.indexOf(";", begin);
	        if (end == -1) {
	        end = dc.length;
	        }
	    }
	    return unescape(dc.substring(begin + prefix.length, end));
	},
	_hasAccess : function() {
		var currentPage = this.state.currentPage;
		if (this.authorizedOnlyRoutes.indexOf(currentPage) > -1) {
			if (window.isUserAuthed) {
				return true;	
			}
			else {
				return false;
			}
		}
		return true;
	},
	render : function(){
		//before anything else, check if user has access to soon-to-be rendered page
		//if not, show not authorized page
		if (!this._hasAccess()){
			return (
				<div>
					<h1>403!</h1>
					<p>You're not authorized to perform this action. Please login first</p>
				</div>
			)
		}

		var self = this;
		var dataset = this.state.dataset;
		if (this.state.currentPage == "home") {
			return (
				<div>
				{dataset.map(function(item, i){
					var bound = self._onSeePollingDetailClick.bind(self, i);
					return (
						<PollItem author={item.author} index={i} see_polling_detail={bound} title={item.title} description={item.description} />
					);
				})}
				</div>
			);
		}
		else if (this.state.currentPage == "detail") {
			var selectedItem = this.state.selectedItem; //which poll user chose
			var bound = self._onHomeButtonClick.bind(this);
			return (
				<PollDetail index={selectedItem} data={dataset[selectedItem].result} homebutton={bound} title={dataset[selectedItem].title} author={dataset[selectedItem].author} description={dataset[selectedItem].description} />
			);
		}
		else if (this.state.currentPage == "createpoll") {
			return (
				<CreatePollForm />
			);
		}
		else if (this.state.currentPage == "error") {
			return (
				<div>
					<h1>Error</h1>
					<p>Sorry, Something is wrong. Please try again</p>
				</div>
			)
		}
		else {
			//Loading
			return (
				<div>
					<h1>Loading...</h1>
					<p>Time to fetch coffee</p>
				</div>
			);
		}
		
	}
});
ReactDOM.render(<HomeButton />, document.getElementById("navbar-brand"));
ReactDOM.render(<LoginButton />, document.getElementById("login"));
ReactDOM.render(<App />, document.getElementById("root"));
