/*
TODO :
1. implement pollform
2. implement mongodb
*/
var PollItem = React.createClass({
	_getExcerpt : function(str, separator, num_of_word) {
	    separator = separator || " ";
	    var arr = str.split(separator);
	    if (arr.length < num_of_word) {
	    	return str;
	    }
	    var result = "";
	    for (var i = 0; i < num_of_word; i++) {
	      if (arr[i] !== undefined) {
	        result += (arr[i] + separator);
	      }
	    }
	    return result + "...";
  	},
	render : function() {
		return (
    		<div className="panel panel-default">
		        <div className="panel-heading">
		          <h3 className="panel-title">
		            {this.props.title}
		          </h3>
		        </div>
		        <div className="panel-body">
		          <div className="row">
		            <div className="col-xs-12">
						{this._getExcerpt(this.props.description, " ", 10)}
						<br />
	              		<a onClick={this.props.see_polling_detail} href={"#detail#poll_id=" + this.props.index}>Click to see detail <i className="fa fa-chevron-circle-right"></i></a>
		            </div>
		          </div>
		        </div>
	      	</div>
	    );
	}
});
var CreatePollForm = React.createClass({
	_processForm : function(){
		alert("submit");
	},
	render : function() {
		return (
			<form id="createpoll_form" ref="createpoll_form" onSubmit={this._processForm}>
				<h2>Create New Poll</h2>
				<div className="input-group">
					<label>Poll title</label>
			  		<input name="title" ref="title" type="text" className="form-control" placeholder="example : Democrat or Republican?" />
				</div>
				<div className="input-group">
					<label>Description</label>
			  		<input name="description" ref="description" type="text" className="form-control" placeholder="Explain why anyone should vote" />
				</div>
				<div className="input-group">
					<label>Poll Options (comma separated)</label>
			  		<input name="poll_options" ref="poll_options" type="text" className="form-control" placeholder="Comma separated" />
				</div>
				<br />
				<button type="submit" className="btn btn-primary">Submit</button>
			</form>
		);
	}
});
var VoteForm = React.createClass({
	_processVote : function(e) {
		e.preventDefault();

		var self = this;
		this.setState({pagestate : "loading"});

		//1. Take data from form
		var formdata = {
			index : this.refs.index.value,
			vote : this.refs.vote.value
		};

		$.ajax({
			url : "/vote",
			data : formdata,
			method :"POST",
			success : function(msg) {
				self.setState({pagestate : "voted", message : "Thanks! You have voted for this topic. Your voice is highly appreciated"});
			},
			error : function(jqxhr, textstatus) {
				self.setState({pagestate : "error", message : textstatus});
			}
		});
	},
	getInitialState : function() {
		return {
			pagestate : "default",
			message : ""
		};
	},
	render : function() {
		if (this.state.pagestate == "default") {
			return (
				<form ref="voteform" onSubmit={this._processVote}>
					<input type="hidden" name="index" ref="index" value={this.props.index} />
					<select className="form-control voteDropdown" ref="vote">
					    {this.props.options}
					</select> 
					<button type="submit" className="buttonVote pull-left">Vote</button>
					<div className="clearfix"></div>
				</form>
			)	
		}
		else if (this.state.pagestate == "loading") {
			return (
				<form ref="voteform" onSubmit={this._processVote}>
					<input type="hidden" name="index" ref="index" value={this.props.index} />
					<select disabled className="form-control voteDropdown" ref="vote">
					    {this.props.options}
					</select> 
					<button disabled type="submit" className="buttonVote pull-left">Vote</button>
					<div className="loading">Loading ...</div>
					<div className="clearfix"></div>
				</form>
			)
		}
		else if (this.state.pagestate == "error") {
			return (
				<form ref="voteform" onSubmit={this._processVote}>
					<input type="hidden" name="index" ref="index" value={this.props.index} />
					<select className="form-control voteDropdown" ref="vote">
					    {this.props.options}
					</select> 
					<button type="submit" className="buttonVote pull-left">Vote</button>
					<div className="clearfix"></div>
					<div className="form-message">{this.state.message}</div>
				</form>
			);			
		}

		return (
			<form ref="voteform" onSubmit={this._processVote}>
				<input type="hidden" name="index" ref="index" value={this.props.index} />
				<select disabled className="form-control voteDropdown" ref="vote">
				    {this.props.options}
				</select> 
				<button disabled type="submit" className="buttonVote pull-left">Vote</button>
				<div className="clearfix"></div>
				<div className="form-message">{this.state.message}</div>
			</form>
		);

		
	}
});
//backup code
var PollDetail = React.createClass({
	render : function() {
		//initiate vars
		var data = this.props.data;
		var sum = 0;

		//get number of all votes
		for (var key in data) {
			sum += data[key];
		}

		//building vote result
		var graphs = [];
		var options = [];
		options.push(<option value="-">-- Select your vote --</option>);
		var idx = 0;
		for (var key in data) {
			//building options
			options.push(<option value={key}>{key.toUpperCase()}</option>);

			//styling graphic
			var classname = "graphcolor" + idx;
			var percentage = (data[key] * 100 / sum).toFixed(2);
			var style = {
				width : percentage + "%"
			}
			graphs.push(
				<div>
					<div style={style} className={classname} />
					<div className="legend">{key.toUpperCase() + " : " + percentage + "%"}</div>
				</div>
			);
			idx++;
		}

		//building share link
		var getUrl = window.location;
		var baseUrl = getUrl .protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1];
		var shareUrl = encodeURIComponent(baseUrl + "#detail#poll_id=" + this.props.index);
		var twitterLink = "https://twitter.com/intent/tweet?related=freecodecamp&text=" + this.props.title + " Check out the vote result : "+ shareUrl;

		return (
			<div>
				<ol className="breadcrumb">
					<li><a onClick={this.props.homebutton} href="#home">Home</a></li>
					<li>{this.props.title}</li>
				</ol>
				<h1 className="title">{this.props.title}</h1>
				<div className="row">
					<div className="col-md-4">
						<VoteForm options={options} index={this.props.index} />
						<br />
						<a target="_blank" href={twitterLink} className="buttonShare"><i className="fa fa-twitter"></i> Tweet this to your followers</a>
						<br /><br />
						{this.props.description}
					</div>
					<div className="col-md-8"><h3>Poll Result : </h3>{graphs}</div>
				</div>
			</div>
		);
	}
});
var LoginButton = React.createClass({
	_getCookie : function(name) {
		var dc = document.cookie;
	    var prefix = name + "=";
	    var begin = dc.indexOf("; " + prefix);
	    if (begin == -1) {
	        begin = dc.indexOf(prefix);
	        if (begin != 0) return null;
	    }
	    else
	    {
	        begin += 2;
	        var end = document.cookie.indexOf(";", begin);
	        if (end == -1) {
	        end = dc.length;
	        }
	    }
	    return unescape(dc.substring(begin + prefix.length, end));
	},
	_onCreatepollClick : function(){
		PubSub.publish("on_create_pollbutton_click");
	},
	render : function() {
		if (this._getCookie("token") !== null) {
			window.isUserAuthed = true;
			return (
				<div className="right-menu">
					<a href="/signout" className="buttonLogin">
						Sign Out
					</a>
					<a onClick={this._onCreatepollClick} href="#createpoll" className="createPollButton">
						<i className="fa fa-plus fa-2x"></i>
					</a>
				</div>
			);
		}
		else {
			window.isUserAuthed = false;
			return (
				<a href="https://github.com/login/oauth/authorize?client_id=c73864bb2fa3040f875e" className="buttonLogin">
					<i className="fa fa-github"></i> Sign in with Github
				</a>
			);
		}
	}
});
var HomeButton = React.createClass({
	render : function() {
		return (
			<a href="#home" onClick={this._onClick}>Voters</a>
		);
	},
	_onClick : function() {
		PubSub.publish('on_homebutton_click');
	}
});
var App = React.createClass({
	_setRoute : function() {
		this.route = {
			'default' : "home",
			'poll_id' : "detail",
			'createpoll' : 'createpoll'
		};
		this.authorizedOnlyRoutes = [
			'createpoll'
		];
	},
	getInitialState : function() {
		return {
			dataset : [],
			currentPage : "",
			selectedItem : -1
		}
	},
	_getPollingList : function(callback, shouldGetFreshdata) {
		//TODO : Call API
		var dataset = [
			{
				author : "machine",
				status : "active",
				title : "Guys or girls?",
				description : "Plaid cardigan shoreditch organic, migas art party sriracha kombucha. 90's yr heirloom stumptown, brooklyn synth salvia truffaut direct trade squid gochujang. Messenger bag bushwick neutra meditation, distillery knausgaard hoodie viral pug intelligentsia pop-up portland flannel. Cardigan tilde master cleanse put a bird on it single-origin coffee. Fap tacos cliche meggings pinterest. Disrupt four loko post-ironic pickled bitters, man braid letterpress normcore swag stumptown blog fixie gluten-free mixtape. Trust fund asymmetrical listicle, cold-pressed mixtape hoodie selfies taxidermy pork belly church-key",
				result : {
					guys : 100,
					girls : 200,
					both : 10
				},
				ip_voters : [],
				username_voters : []
			},
			{
				author : "machine",
				status : "active",
				title : "Reason for working?",
				description : "Vice messenger bag umami, organic banh mi art party farm-to-table meditation actually. Mumblecore poutine jean shorts sartorial drinking vinegar stumptown four loko microdosing. Gentrify authentic listicle selfies. Lomo next level bicycle rights blog, 3 wolf moon flannel brunch.",
				result : {
					guys : 100,
					girls : 200,
					both : 10
				},
				ip_voters : [],
				username_voters : []
			},
			{
				author : "machine",
				status : "active",
				title : "Democrat or republic?",
				description : "VHS poutine narwhal fingerstache before they sold out scenester slow-carb. Health goth meditation you probably haven't heard of them, freegan chambray truffaut seitan microdosing disrupt sriracha listicle kale chips tousled portland VHS. Try-hard put a bird on it viral craft beer authentic cold-pressed.",
				result : {
					guys : 100,
					girls : 200,
					both : 10
				},
				ip_voters : [],
				username_voters : []
			},
			{
				author : "machine",
				status : "active",
				title : "A or B?",
				description : "Just for fun",
				result : {
					guys : 100,
					girls : 200,
					both : 10
				},
				ip_voters : [],
				username_voters : []
			}
		];
		
		callback(dataset);
	},
	componentWillMount : function() {
		var self = this;
		
		/*--------------------------------
			subscribe to outside events
		//--------------------------------*/
		this.pubsub_token = PubSub.subscribe("on_homebutton_click", function(){
			this._getPollingList(function(dataset){
				self.setState({currentPage : "home", dataset: dataset});	
			})
		}.bind(this));
		this.pubsub_token = PubSub.subscribe("on_create_pollbutton_click", function(){
			this.setState({currentPage : "createpoll"});
		}.bind(this));
		

		/*--------------------------------
			ROUTING
		//--------------------------------*/
		this._setRoute();
		var currentPage = "";
		for (var key in this.route) {
			if (window.location.hash.includes(key)) {
				currentPage = this.route[key];
				break;
			}
		}
		currentPage = currentPage == "" ? this.route.default : currentPage;

		if (currentPage == "home") {
			this._getPollingList(function(dataset){
				self.setState({currentPage : currentPage, dataset: dataset});	
			})
		}
		else if (currentPage == "detail") {
			this._getPollingList(function(dataset){
				self.setState({
					dataset : dataset
					, currentPage : currentPage
					, selectedItem : window.location.hash.split("=")[1]
				});
			})
		}
		else {
			this.setState({currentPage : currentPage});
		}
		
	},
	_onSeePollingDetailClick : function(i) {
		this.setState({
			currentPage : "detail",
			selectedItem : i
 		});
	},
	_onHomeButtonClick : function() {
		this.setState({currentPage: "home"});
	},
	_getCookie : function(name) {
		var dc = document.cookie;
	    var prefix = name + "=";
	    var begin = dc.indexOf("; " + prefix);
	    if (begin == -1) {
	        begin = dc.indexOf(prefix);
	        if (begin != 0) return null;
	    }
	    else
	    {
	        begin += 2;
	        var end = document.cookie.indexOf(";", begin);
	        if (end == -1) {
	        end = dc.length;
	        }
	    }
	    return unescape(dc.substring(begin + prefix.length, end));
	},
	_hasAccess : function() {
		var currentPage = this.state.currentPage;
		if (this.authorizedOnlyRoutes.indexOf(currentPage) > -1) {
			if (window.isUserAuthed) {
				return true;	
			}
			else {
				return false;
			}
		}
		return true;
	},
	render : function(){
		//before anything else, check if user has access to soon-to-be rendered page
		//if not, show not authorized page
		if (!this._hasAccess()){
			return (
				<div>
					<h1>403!</h1>
					<p>You're not authorized to perform this action. Please login first</p>
				</div>
			)
		}

		var self = this;
		var dataset = this.state.dataset;
		// alert("hash = " + window.location.hash);
		if (this.state.currentPage == "home") {
			return (
				<div>
				{dataset.map(function(item, i){
					var bound = self._onSeePollingDetailClick.bind(self, i);
					return (
						<PollItem index={i} see_polling_detail={bound} title={item.title} description={item.description} />
					);
				})}
				</div>
			);
		}
		else if (this.state.currentPage == "detail") {
			var selectedItem = this.state.selectedItem; //which poll user chose
			var bound = self._onHomeButtonClick.bind(this);
			return (
				<PollDetail index={selectedItem} data={dataset[selectedItem].result} homebutton={bound} title={dataset[selectedItem].title} description={dataset[selectedItem].description} />
			);
		}
		else if (this.state.currentPage == "createpoll") {
			return (
				<CreatePollForm />
			);
		}
		
	}
});
ReactDOM.render(<HomeButton />, document.getElementById("navbar-brand"));
ReactDOM.render(<LoginButton />, document.getElementById("login"));
ReactDOM.render(<App />, document.getElementById("root"));
